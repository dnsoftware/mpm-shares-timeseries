// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/shares.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SharesService_AddSharesBatch_FullMethodName = "/grpc.SharesService/AddSharesBatch"
)

// SharesServiceClient is the client API for SharesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharesServiceClient interface {
	AddSharesBatch(ctx context.Context, in *AddSharesBatchRequest, opts ...grpc.CallOption) (*AddSharesBatchResponse, error)
}

type sharesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSharesServiceClient(cc grpc.ClientConnInterface) SharesServiceClient {
	return &sharesServiceClient{cc}
}

func (c *sharesServiceClient) AddSharesBatch(ctx context.Context, in *AddSharesBatchRequest, opts ...grpc.CallOption) (*AddSharesBatchResponse, error) {
	out := new(AddSharesBatchResponse)
	err := c.cc.Invoke(ctx, SharesService_AddSharesBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharesServiceServer is the server API for SharesService service.
// All implementations must embed UnimplementedSharesServiceServer
// for forward compatibility
type SharesServiceServer interface {
	AddSharesBatch(context.Context, *AddSharesBatchRequest) (*AddSharesBatchResponse, error)
	mustEmbedUnimplementedSharesServiceServer()
}

// UnimplementedSharesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSharesServiceServer struct {
}

func (UnimplementedSharesServiceServer) AddSharesBatch(context.Context, *AddSharesBatchRequest) (*AddSharesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSharesBatch not implemented")
}
func (UnimplementedSharesServiceServer) mustEmbedUnimplementedSharesServiceServer() {}

// UnsafeSharesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharesServiceServer will
// result in compilation errors.
type UnsafeSharesServiceServer interface {
	mustEmbedUnimplementedSharesServiceServer()
}

func RegisterSharesServiceServer(s grpc.ServiceRegistrar, srv SharesServiceServer) {
	s.RegisterService(&SharesService_ServiceDesc, srv)
}

func _SharesService_AddSharesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSharesBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharesServiceServer).AddSharesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SharesService_AddSharesBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharesServiceServer).AddSharesBatch(ctx, req.(*AddSharesBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SharesService_ServiceDesc is the grpc.ServiceDesc for SharesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SharesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.SharesService",
	HandlerType: (*SharesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSharesBatch",
			Handler:    _SharesService_AddSharesBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shares.proto",
}
